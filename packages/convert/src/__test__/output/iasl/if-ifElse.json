{
  "statements": [
    {
      "stateName": "Assign val",
      "name": {
        "identifier": "val",
        "type": "object",
        "_syntaxKind": "identifier"
      },
      "source": "val = { a: \"\", b: \"\", c: \"\", d: \"\", e: \"\", f: \"\", g: \"\" }",
      "expression": {
        "properties": {
          "a": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "b": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "c": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "d": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "e": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "f": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "g": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          }
        },
        "_syntaxKind": "literal-object"
      },
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "val.a",
        "type": "string",
        "_syntaxKind": "identifier"
      },
      "expression": {
        "value": "before",
        "type": "string",
        "_syntaxKind": "literal"
      },
      "stateName": "Assign val.a",
      "_syntaxKind": "variable-assignment"
    },
    {
      "stateName": "If (true)",
      "condition": {
        "rhs": {
          "value": true,
          "type": "boolean",
          "_syntaxKind": "literal"
        },
        "operator": "is-truthy",
        "_syntaxKind": "binary-expression"
      },
      "then": {
        "statements": [
          {
            "name": {
              "identifier": "val.b",
              "type": "string",
              "_syntaxKind": "identifier"
            },
            "expression": {
              "value": "true_1",
              "type": "string",
              "_syntaxKind": "literal"
            },
            "stateName": "Assign val.b",
            "_syntaxKind": "variable-assignment"
          },
          {
            "name": {
              "identifier": "val.c",
              "type": "string",
              "_syntaxKind": "identifier"
            },
            "expression": {
              "value": "true_2",
              "type": "string",
              "_syntaxKind": "literal"
            },
            "stateName": "Assign val.c",
            "_syntaxKind": "variable-assignment"
          }
        ],
        "_syntaxKind": "function"
      },
      "else": {
        "statements": [
          {
            "name": {
              "identifier": "val.b",
              "type": "string",
              "_syntaxKind": "identifier"
            },
            "expression": {
              "value": "false_1",
              "type": "string",
              "_syntaxKind": "literal"
            },
            "stateName": "Assign val.b",
            "_syntaxKind": "variable-assignment"
          },
          {
            "name": {
              "identifier": "val.c",
              "type": "string",
              "_syntaxKind": "identifier"
            },
            "expression": {
              "value": "false_2",
              "type": "string",
              "_syntaxKind": "literal"
            },
            "stateName": "Assign val.c",
            "_syntaxKind": "variable-assignment"
          }
        ],
        "_syntaxKind": "function"
      },
      "source": "if (true) {\n    val.b = \"true_1\";\n    val.c = \"true_2\";\n  } else {\n    val.b = \"false_1\";\n    val.c = \"false_2\";\n  }",
      "_syntaxKind": "if"
    },
    {
      "name": {
        "identifier": "val.d",
        "type": "string",
        "_syntaxKind": "identifier"
      },
      "expression": {
        "value": "after",
        "type": "string",
        "_syntaxKind": "literal"
      },
      "stateName": "Assign val.d",
      "_syntaxKind": "variable-assignment"
    },
    {
      "stateName": "Return val",
      "expression": {
        "identifier": "val",
        "type": "object",
        "_syntaxKind": "identifier"
      },
      "_syntaxKind": "return"
    }
  ],
  "_syntaxKind": "statemachine"
}