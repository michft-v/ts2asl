{
  "statements": [
    {
      "stateName": "Assign val",
      "name": {
        "identifier": "val",
        "type": "object",
        "_syntaxKind": "identifier"
      },
      "source": "val = { a: \"\", b: \"\", c: \"\", d: \"\", e: \"\", f: \"\", g: \"\" }",
      "expression": {
        "properties": {
          "a": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "b": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "c": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "d": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "e": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "f": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          },
          "g": {
            "value": "",
            "type": "string",
            "_syntaxKind": "literal"
          }
        },
        "_syntaxKind": "literal-object"
      },
      "_syntaxKind": "variable-assignment"
    },
    {
      "name": {
        "identifier": "val.a",
        "type": "string",
        "_syntaxKind": "identifier"
      },
      "expression": {
        "value": "before",
        "type": "string",
        "_syntaxKind": "literal"
      },
      "stateName": "Assign val.a",
      "_syntaxKind": "variable-assignment"
    },
    {
      "stateName": "If (true)",
      "condition": {
        "rhs": {
          "value": true,
          "type": "boolean",
          "_syntaxKind": "literal"
        },
        "operator": "is-truthy",
        "_syntaxKind": "binary-expression"
      },
      "then": {
        "statements": [
          {
            "name": {
              "identifier": "val.b",
              "type": "string",
              "_syntaxKind": "identifier"
            },
            "expression": {
              "value": "outer_1",
              "type": "string",
              "_syntaxKind": "literal"
            },
            "stateName": "Assign val.b",
            "_syntaxKind": "variable-assignment"
          },
          {
            "name": {
              "identifier": "val.c",
              "type": "string",
              "_syntaxKind": "identifier"
            },
            "expression": {
              "value": "outer_2",
              "type": "string",
              "_syntaxKind": "literal"
            },
            "stateName": "Assign val.c",
            "_syntaxKind": "variable-assignment"
          },
          {
            "stateName": "If (true)",
            "condition": {
              "rhs": {
                "value": true,
                "type": "boolean",
                "_syntaxKind": "literal"
              },
              "operator": "is-truthy",
              "_syntaxKind": "binary-expression"
            },
            "then": {
              "statements": [
                {
                  "name": {
                    "identifier": "val.d",
                    "type": "string",
                    "_syntaxKind": "identifier"
                  },
                  "expression": {
                    "value": "inner_1",
                    "type": "string",
                    "_syntaxKind": "literal"
                  },
                  "stateName": "Assign val.d",
                  "_syntaxKind": "variable-assignment"
                },
                {
                  "name": {
                    "identifier": "val.e",
                    "type": "string",
                    "_syntaxKind": "identifier"
                  },
                  "expression": {
                    "value": "inner_2",
                    "type": "string",
                    "_syntaxKind": "literal"
                  },
                  "stateName": "Assign val.e",
                  "_syntaxKind": "variable-assignment"
                }
              ],
              "_syntaxKind": "function"
            },
            "else": {
              "statements": [
                {
                  "name": {
                    "identifier": "val.e",
                    "type": "string",
                    "_syntaxKind": "identifier"
                  },
                  "expression": {
                    "value": "inner_else_2",
                    "type": "string",
                    "_syntaxKind": "literal"
                  },
                  "stateName": "Assign val.e",
                  "_syntaxKind": "variable-assignment"
                }
              ],
              "_syntaxKind": "function"
            },
            "source": "if (true) {\n      val.d = \"inner_1\";\n      val.e = \"inner_2\";\n    } else {\n      val.e = \"inner_else_2\";\n    }",
            "_syntaxKind": "if"
          }
        ],
        "_syntaxKind": "function"
      },
      "else": {
        "statements": [
          {
            "name": {
              "identifier": "val.f",
              "type": "string",
              "_syntaxKind": "identifier"
            },
            "expression": {
              "value": "outer_else_2",
              "type": "string",
              "_syntaxKind": "literal"
            },
            "stateName": "Assign val.f",
            "_syntaxKind": "variable-assignment"
          }
        ],
        "_syntaxKind": "function"
      },
      "source": "if (true) {\n    val.b = \"outer_1\";\n    val.c = \"outer_2\";\n    if (true) {\n      val.d = \"inner_1\";\n      val.e = \"inner_2\";\n    } else {\n      val.e = \"inner_else_2\";\n    }\n  } else {\n    val.f = \"outer_else_2\";\n  }",
      "_syntaxKind": "if"
    },
    {
      "name": {
        "identifier": "val.g",
        "type": "string",
        "_syntaxKind": "identifier"
      },
      "expression": {
        "value": "after",
        "type": "string",
        "_syntaxKind": "literal"
      },
      "stateName": "Assign val.g",
      "_syntaxKind": "variable-assignment"
    },
    {
      "stateName": "Return val",
      "expression": {
        "identifier": "val",
        "type": "object",
        "_syntaxKind": "identifier"
      },
      "_syntaxKind": "return"
    }
  ],
  "_syntaxKind": "statemachine"
}